/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'checkstyle'
    id 'pmd'
    id 'net.ltgt.apt' version '0.17'
}

repositories {
    mavenLocal()
    maven {
        url = 'http://repo.maven.apache.org/maven2'
    }
    maven { url 'http://172.16.0.32:9090/artifactory/libs-snapshot-local' }
    mavenCentral()
    maven { url 'http://172.16.0.32:9090/artifactory/nuclei-release-repo' }
}

/**
 * Checkstyle configuratoins
 */
checkstyle {
    toolVersion '8.11';
    sourceSets = [project.sourceSets.main]
}
tasks.withType(Checkstyle) {
    showViolations true
    exclude '**/proto/**'
}
// Fails gradle build when checkstyle violation occurs
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
            }
        }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:2.2.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.2.1.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-mail:2.2.1.RELEASE'
    runtime 'org.springframework.boot:spring-boot-devtools:2.2.1.RELEASE'
    runtime 'mysql:mysql-connector-java:8.0.18'
    testCompile 'org.springframework.boot:spring-boot-starter-test:2.2.1.RELEASE'
    implementation 'org.hibernate:hibernate-core:5.4.10.Final'
    compile('io.jsonwebtoken:jjwt:0.7.0')
    compile group: "com.twilio.sdk", name:"twilio", version: "7.16.1"

    implementation('org.mapstruct:mapstruct-jdk8:1.2.0.Final')
    implementation('org.mapstruct:mapstruct:1.2.0.Final')
    implementation('org.mapstruct:mapstruct-processor:1.2.0.Final')
}

group = 'com.newsletter'
version = '0.0.1-SNAPSHOT'
description = 'newsletter'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext {
    javaLanguageLevel = '1.8'
    generatedMapperSourcesDir = "${buildDir}/generated-src/mapstruct/main"
}

sourceCompatibility = rootProject.javaLanguageLevel

configurations {
    mapstruct
}